
As versões usadas nesse projeto foi, java 17 e reactJS 18. No ReactJs utilizei as dependências “react-icons”: “4.8.0” e “react-bootstrap”: “ 2.7.4

Comandos para instalá-los:

Npm install

Para rodar o front-end deve se usar o comando: npm run dev

Já no Java utilizei as dependências: spring-boot-starter-data-jpa spring-boot-starter-web postgressql Para o projeto ser rodado em local, deve-se utilizar dessas dependências.

Como funciona o front-end: Baseei a criação do front-end em 3 componentes, o de pesquisa (Formulário), exibição de Usuário (Usuário) e repositório (Repositório). Os 3 componentes são retornados em App.jsx. Variáveis do front-end:

Const [minhaVariavel, setMinhaVariavel] = useState(‘ ’);

Essa variável serve para receber o valor do componente filho e enviar para o componente pai, nesse caso estou utilizando para receber o valor do input do componente formulário, com o valor recebido eu passo como parâmetro para fazer a pesquisa de usuário. http://localhost:8080/user/${minhaVariavel}

Const[dados, setDados] = useState(‘ ’) Ela serve para receber os dados da consulta de usuário e envia-las para o componente Usuário. vetor={dados}

Const[dadosRepositorio, setDadosRepositorio] = useState(‘ ’) Serve para enviar os dados da consulta de repositório para o componente repositório.

Const childToParent = (dados)=> { setMinhaVariavel(dados) } Serve para seta o valor login vindo do componente formulário.

Const linkGitParaConsulta = (dados)=> { setDadosRepositorio (dados) }

Serve para receber o valor de login do usuário para poder realizar a consulta de repositório. http://localhost:8080/user/${dadosRepositorio.vetor.login}/repos

Funções front-end:

PesquisarUsuario() Serve para realizar a consulta do usuário.

pesquisarRepositorio() Serve para realizar a consulta do repositório.

Componentes: Formulário: Um formulário com apenas o campo input e o botão, nesse botão adicionei o onClick, ao clica-lo a variável setada no input será enviada para o componente pai e será recebida pelo childToParent(Explicação dessa variável acima). Com a variável setada, o onSubmit chama o handleInputChange que por sua vez chama a função pesquisarUsuario().

Usuário: O componente usuário recebe os valores da consulta e os exibe para o cliente, criei essa página utilizando o BootStrap. Um fato curioso é que esse componente envia os dados desse usuário consultado para o componente Pai (App) com o intuito de usar o login desse usuário para consultar o seu repositório.

Repositório: O componente repositório recebe os valores da consulta do método “pesquisarRepositorio()” E os exibe para o cliente. Você pode selecionar um repositório em especifico e consulta-lo no próprio GitHub, basta clicar em “Visite o repositório”

Como funciona o Back-End Utilizei a biblioteca RestTemplate para consultar a api do git. Basicamente o utilizei apenas de 2 funções no back-end.

Uma função consultar de usuário. Usei o restTemplate para fazer a consulta da api e passei os dados para o modelo user, esse método retorna um ResponseEntity.ok(user).

Função para consulta de repositório: Como não sei a quantidade de repositórios que podem vim na consulta, resolvi retornar esse método como um Page. Após colocar o retorno eu recebi um erro:

jackson.databind.exc.InvalidDefinitionException: No serializer found for class KontHub.demo.Models.Repository and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (via reference chain: org.springframework.data .domain.PageImpl["content"]->java.util.Collections$UnmodifiableRandomAccessList[0]

Aparentemente o Jackson não conseguiu encontrar o serializador para a classe Repositório. Para resolver o problema eu criei um serializador para a classe repositório. Criei a classe RepositorioBeanSerializerModifier estendendo o BeanSerializerModifier. O BeanSerializerModifier verifica se a classe em questão é um repositorio, se for ele retorna uma instancia do serializador, no meu caso “RepositorioSerializer” Este RepositorioSerializer define como você deseja serializar os atributos do seu objeto.

Vídeo de demostração do projeto: https://youtu.be/4ms6gPVaakI
